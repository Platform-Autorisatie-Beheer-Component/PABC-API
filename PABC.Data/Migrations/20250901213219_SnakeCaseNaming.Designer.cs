// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PABC.Data;

#nullable disable

namespace PABC.Data.Migrations
{
    [DbContext(typeof(PabcDbContext))]
    [Migration("20250901213219_SnakeCaseNaming")]
    partial class SnakeCaseNaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainEntityType", b =>
                {
                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("domain_id");

                    b.Property<Guid>("EntityTypesId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_types_id");

                    b.HasKey("DomainId", "EntityTypesId")
                        .HasName("pk_domain_entity_type");

                    b.HasIndex("EntityTypesId")
                        .HasDatabaseName("ix_domain_entity_type_entity_types_id");

                    b.ToTable("domain_entity_type", (string)null);
                });

            modelBuilder.Entity("PABC.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("application");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_application_role");

                    b.HasIndex("Application", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_application_role_application_name");

                    b.ToTable("application_role", (string)null);
                });

            modelBuilder.Entity("PABC.Data.Entities.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_domain");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_domain_name");

                    b.ToTable("domain", (string)null);
                });

            modelBuilder.Entity("PABC.Data.Entities.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("entity_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("type");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_entity_type");

                    b.HasIndex("Type", "EntityTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_entity_type_type_entity_type_id");

                    b.ToTable("entity_type", (string)null);
                });

            modelBuilder.Entity("PABC.Data.Entities.FunctionalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_functional_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_functional_role_name");

                    b.ToTable("functional_role", (string)null);
                });

            modelBuilder.Entity("PABC.Data.Entities.Mapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_role_id");

                    b.Property<Guid?>("DomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("domain_id");

                    b.Property<Guid>("FunctionalRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("functional_role_id");

                    b.Property<bool>("IsAllEntityTypes")
                        .HasColumnType("boolean")
                        .HasColumnName("is_all_entity_types");

                    b.HasKey("Id")
                        .HasName("pk_mapping");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("ix_mapping_domain_id");

                    b.HasIndex("FunctionalRoleId")
                        .HasDatabaseName("ix_mapping_functional_role_id");

                    b.HasIndex("ApplicationRoleId", "DomainId", "FunctionalRoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_mapping_application_role_id_domain_id_functional_role_id");

                    b.ToTable("mapping", null, t =>
                        {
                            t.HasCheckConstraint("CK_Mapping_domain_id_is_all_entity_types", "(\"is_all_entity_types\" = true AND \"domain_id\" IS NULL) OR (\"is_all_entity_types\" = false AND \"domain_id\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("DomainEntityType", b =>
                {
                    b.HasOne("PABC.Data.Entities.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_domain_entity_type_domain_domain_id");

                    b.HasOne("PABC.Data.Entities.EntityType", null)
                        .WithMany()
                        .HasForeignKey("EntityTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_domain_entity_type_entity_type_entity_types_id");
                });

            modelBuilder.Entity("PABC.Data.Entities.Mapping", b =>
                {
                    b.HasOne("PABC.Data.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mapping_application_role_application_role_id");

                    b.HasOne("PABC.Data.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_mapping_domain_domain_id");

                    b.HasOne("PABC.Data.Entities.FunctionalRole", "FunctionalRole")
                        .WithMany()
                        .HasForeignKey("FunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mapping_functional_role_functional_role_id");

                    b.Navigation("ApplicationRole");

                    b.Navigation("Domain");

                    b.Navigation("FunctionalRole");
                });
#pragma warning restore 612, 618
        }
    }
}
